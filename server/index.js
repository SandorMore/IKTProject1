const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(cors());

app.use(express.json()); 

const DB_URI = 'mongodb+srv://msaso0725_db_user:Z9lY66ImIs4hwyhx@adatkezelo.otlp11o.mongodb.net/DiakAdatok?retryWrites=true&w=majority&appName=Adatkezelo';

mongoose.connect(DB_URI, {
Â  Â  serverSelectionTimeoutMS: 5000, 
Â  Â  socketTimeoutMS: 45000,
}).catch(err => {
Â  Â  console.error("Initial connection error:", err.message);
});

const db = mongoose.connection;
db.on('error', (err) => console.error('MongoDB connection error:', err));
db.once('open', () => console.log('Connected to MongoDB Atlas'));

const COLLECTION_NAME = 'DiakAdatok'; 
//diak sÃ©ma
const diakSchema = new mongoose.Schema({
Â  Â  id: String,
Â  Â  nev: String,
Â  Â  anyja_neve: String,
Â  Â  szuletesi_hely: String,
Â  Â  szuletesi_ido: String,
Â  Â  Ã©vfolyam: String, 
Â  Â  osztÃ¡ly: String,
Â  Â  kolis: Boolean,
Â  Â  nyelv: String,
Â  Â  tantÃ¡rgyak: Object 
}, {
Â  Â  toJSON: { virtuals: true }, 
Â  Â  versionKey: false,
Â  Â  strict: false 
});

const Diak = mongoose.model('Diak', diakSchema, COLLECTION_NAME); 

// --- Configuration: Subjects to initialize for new students ---
// Use the subjects that exist in your database or should be standard.
const DEFAULT_SUBJECTS = ["Magyar", "Matematika", "TÃ¶rtÃ©nelem", "Angol"];


// --- 1. GET ALL DIAKOK API ---
app.get('/api/diakok', async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const diakok = await Diak.find({}).lean(); 
Â  Â  Â  Â  console.log(`ðŸ”Ž Found ${diakok.length} documents in collection '${COLLECTION_NAME}'.`);
Â  Â  Â  Â  res.json(diakok);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Error during database query:', err.message);
Â  Â  Â  Â  res.status(500).json({ message: 'Server error fetching students data.', error: err.message });
Â  Â  }
});

// --- 2. ADD NEW DIAK API (Modified to initialize subjects) ---
app.post('/api/diakok', async (req, res) => {
Â  Â  try {
        // Initialize tantÃ¡rgyak object with empty arrays for all default subjects
        const initialTantargy = DEFAULT_SUBJECTS.reduce((acc, subject) => {
            acc[subject] = [];
            return acc;
        }, {});

Â  Â  Â  Â  const newDiak = new Diak({
            ...req.body,
            tantÃ¡rgyak: initialTantargy, // Overwrite placeholder with initialized subjects
        });

Â  Â  Â  Â  await newDiak.save();
Â  Â  Â  Â  res.status(201).json(newDiak);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Error during document insertion:', err.message);
Â  Â  Â  Â  res.status(500).json({ message: 'Server error saving student data.', error: err.message });
Â  Â  }
});

// --- 3. ADD NEW MARK API (NEW ENDPOINT) ---
app.post('/api/diakok/:id/mark', async (req, res) => {
    const diakId = req.params.id; // The Mongoose _id
    const { tantargy, jegy } = req.body;

    if (!tantargy || !jegy) {
        return res.status(400).json({ message: 'Missing subject (tantargy) or mark (jegy).' });
    }

    try {
        const diak = await Diak.findById(diakId);

        if (!diak) {
            return res.status(404).json({ message: 'Student not found.' });
        }

        // Use $push to append the new mark to the array within the tantÃ¡rgyak object
        // The path must be constructed dynamically: "tantÃ¡rgyak.SubjectName"
        const update = {
            $push: { [`tantÃ¡rgyak.${tantargy}`]: jegy }
        };

        const updatedDiak = await Diak.findByIdAndUpdate(diakId, update, { new: true, runValidators: true }).lean();

        res.json(updatedDiak);
    } catch (err) {
        console.error('Error adding mark:', err.message);
        res.status(500).json({ message: 'Server error adding mark.', error: err.message });
    }
});


const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
